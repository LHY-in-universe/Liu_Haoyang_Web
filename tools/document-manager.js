#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * ÊñáÊ°£ÁÆ°ÁêÜÂ∑•ÂÖ∑
 * Â∏ÆÂä©Ê∑ªÂä†„ÄÅÊõ¥Êñ∞ÂíåÁÆ°ÁêÜÁΩëÁ´ô‰∏≠ÁöÑÊñáÊ°£ËµÑÊ∫ê
 */

// ÈÖçÁΩÆ
const CONFIG = {
    documentsDir: './public/documents',
    documentsJson: './public/documents/documents.json',
    supportedFormats: ['.pdf', '.doc', '.docx', '.ppt', '.pptx', '.md', '.txt'],
    categories: {
        'resume': {
            title: 'ÁÆÄÂéÜÊñáÊ°£',
            titleEn: 'Resume Documents',
            description: '‰∏™‰∫∫ÁÆÄÂéÜÂíåÁõ∏ÂÖ≥ÊñáÊ°£',
            descriptionEn: 'Personal resume and related documents',
            icon: 'üìÑ'
        },
        'presentations': {
            title: 'ÊºîËÆ≤Á®ø',
            titleEn: 'Presentations',
            description: 'Â≠¶ÊúØÊºîËÆ≤ÂíåÊäÄÊúØÂàÜ‰∫´',
            descriptionEn: 'Academic presentations and technical talks',
            icon: 'üìä'
        },
        'academic': {
            title: 'Â≠¶ÊúØËÆ∫Êñá',
            titleEn: 'Academic Papers',
            description: 'Á†îÁ©∂ËÆ∫ÊñáÂíåÂ≠¶ÊúØÊñáÁ´†',
            descriptionEn: 'Research papers and academic articles',
            icon: 'üéì'
        },
        'blog': {
            title: 'ÂçöÂÆ¢ÊñáÁ´†',
            titleEn: 'Blog Articles',
            description: 'ÊäÄÊúØÂçöÂÆ¢Âíå‰∏™‰∫∫ÊÄùËÄÉ',
            descriptionEn: 'Technical blogs and personal thoughts',
            icon: 'üìù'
        }
    }
};

class DocumentManager {
    constructor() {
        this.documents = [];
        this.categories = CONFIG.categories;
        this.init();
    }
    
    init() {
        this.ensureDirectories();
        this.loadDocuments();
    }
    
    ensureDirectories() {
        // Á°Æ‰øùÊâÄÊúâÂøÖË¶ÅÁöÑÁõÆÂΩïÂ≠òÂú®
        const dirs = [
            CONFIG.documentsDir,
            path.join(CONFIG.documentsDir, 'resume'),
            path.join(CONFIG.documentsDir, 'presentations'),
            path.join(CONFIG.documentsDir, 'presentations/PHYS'),
            path.join(CONFIG.documentsDir, 'academic'),
            path.join(CONFIG.documentsDir, 'academic/PHYS'),
            path.join(CONFIG.documentsDir, 'blog')
        ];
        
        dirs.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`‚úÖ ÂàõÂª∫ÁõÆÂΩï: ${dir}`);
            }
        });
    }
    
    loadDocuments() {
        if (fs.existsSync(CONFIG.documentsJson)) {
            try {
                const data = fs.readFileSync(CONFIG.documentsJson, 'utf8');
                const parsed = JSON.parse(data);
                this.documents = parsed.documents || [];
                this.categories = { ...this.categories, ...parsed.categories };
            } catch (error) {
                console.error('‚ùå Âä†ËΩΩÊñáÊ°£ÈÖçÁΩÆÂ§±Ë¥•:', error);
                this.documents = [];
            }
        }
    }
    
    saveDocuments() {
        const data = {
            categories: this.categories,
            documents: this.documents
        };
        
        try {
            fs.writeFileSync(CONFIG.documentsJson, JSON.stringify(data, null, 2), 'utf8');
            console.log('‚úÖ ÊñáÊ°£ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò');
        } catch (error) {
            console.error('‚ùå ‰øùÂ≠òÊñáÊ°£ÈÖçÁΩÆÂ§±Ë¥•:', error);
        }
    }
    
    addDocument(filePath, options = {}) {
        if (!fs.existsSync(filePath)) {
            console.error(`‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®: ${filePath}`);
            return false;
        }
        
        const fileName = path.basename(filePath);
        const ext = path.extname(fileName).toLowerCase();
        
        if (!CONFIG.supportedFormats.includes(ext)) {
            console.error(`‚ùå ‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè: ${ext}`);
            console.log(`ÊîØÊåÅÁöÑÊ†ºÂºè: ${CONFIG.supportedFormats.join(', ')}`);
            return false;
        }
        
        // ÁîüÊàêÊñáÊ°£ID
        const id = options.id || this.generateId(fileName);
        
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
        const existing = this.documents.find(doc => doc.id === id);
        if (existing && !options.overwrite) {
            console.error(`‚ùå ÊñáÊ°£IDÂ∑≤Â≠òÂú®: ${id}Ôºå‰ΩøÁî® --overwrite Âº∫Âà∂Ë¶ÜÁõñ`);
            return false;
        }
        
        // Á°ÆÂÆöÂàÜÁ±ª
        const category = options.category || this.guessCategory(fileName);
        if (!this.categories[category]) {
            console.error(`‚ùå Êú™Áü•ÂàÜÁ±ª: ${category}`);
            console.log(`ÂèØÁî®ÂàÜÁ±ª: ${Object.keys(this.categories).join(', ')}`);
            return false;
        }
        
        // Â§çÂà∂Êñá‰ª∂Âà∞ÁõÆÊ†á‰ΩçÁΩÆ
        const targetDir = path.join(CONFIG.documentsDir, category);
        const targetPath = path.join(targetDir, fileName);
        
        try {
            fs.copyFileSync(filePath, targetPath);
            console.log(`‚úÖ Êñá‰ª∂Â∑≤Â§çÂà∂Âà∞: ${targetPath}`);
        } catch (error) {
            console.error(`‚ùå Â§çÂà∂Êñá‰ª∂Â§±Ë¥•:`, error);
            return false;
        }
        
        // Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
        const stats = fs.statSync(targetPath);
        const fileSize = this.formatFileSize(stats.size);
        
        // ÂàõÂª∫ÊñáÊ°£ËÆ∞ÂΩï
        const document = {
            id,
            category,
            title: options.title || path.parse(fileName).name,
            titleEn: options.titleEn || options.title || path.parse(fileName).name,
            filename: fileName,
            path: `public/documents/${category}/${fileName}`,
            description: options.description || 'ÊöÇÊó†ÊèèËø∞',
            descriptionEn: options.descriptionEn || options.description || 'No description available',
            author: options.author || 'ÂàòÊµ©Ê¥ã',
            authorEn: options.authorEn || options.author || 'Liu Haoyang',
            date: options.date || new Date().toISOString().split('T')[0],
            tags: options.tags || this.generateTags(fileName, category),
            tagsEn: options.tagsEn || options.tags || this.generateTagsEn(fileName, category),
            language: options.language || 'zh',
            fileSize,
            downloadUrl: `public/documents/${category}/${fileName}`,
            previewUrl: options.previewUrl || null,
            featured: options.featured || false
        };
        
        // Ê∑ªÂä†ÊàñÊõ¥Êñ∞ÊñáÊ°£
        if (existing) {
            const index = this.documents.findIndex(doc => doc.id === id);
            this.documents[index] = document;
            console.log(`‚úÖ ÊñáÊ°£Â∑≤Êõ¥Êñ∞: ${document.title}`);
        } else {
            this.documents.push(document);
            console.log(`‚úÖ ÊñáÊ°£Â∑≤Ê∑ªÂä†: ${document.title}`);
        }
        
        this.saveDocuments();
        return true;
    }
    
    generateId(fileName) {
        const baseName = path.parse(fileName).name;
        return baseName.toLowerCase()
            .replace(/[^a-z0-9\u4e00-\u9fff]+/g, '-')
            .replace(/^-+|-+$/g, '');
    }
    
    guessCategory(fileName) {
        const name = fileName.toLowerCase();
        
        if (name.includes('resume') || name.includes('cv') || name.includes('ÁÆÄÂéÜ')) {
            return 'resume';
        } else if (name.includes('presentation') || name.includes('slides') || name.includes('ÊºîËÆ≤')) {
            return 'presentations';
        } else if (name.includes('paper') || name.includes('research') || name.includes('ËÆ∫Êñá')) {
            return 'academic';
        } else if (name.includes('blog') || name.includes('article') || name.includes('ÂçöÂÆ¢')) {
            return 'blog';
        }
        
        return 'academic'; // ÈªòËÆ§ÂàÜÁ±ª
    }
    
    generateTags(fileName, category) {
        const baseTags = {
            'resume': ['ÁÆÄÂéÜ', '‰∏™‰∫∫'],
            'presentations': ['ÊºîËÆ≤', 'ÂπªÁÅØÁâá'],
            'academic': ['ËÆ∫Êñá', 'Â≠¶ÊúØ'],
            'blog': ['ÂçöÂÆ¢', 'ÊñáÁ´†']
        };
        
        const tags = [...(baseTags[category] || [])];
        
        const name = fileName.toLowerCase();
        if (name.includes('phys')) tags.push('Áâ©ÁêÜ');
        if (name.includes('tech')) tags.push('ÊäÄÊúØ');
        if (name.includes('research')) tags.push('Á†îÁ©∂');
        
        return tags;
    }
    
    generateTagsEn(fileName, category) {
        const baseTags = {
            'resume': ['resume', 'personal'],
            'presentations': ['presentation', 'slides'],
            'academic': ['paper', 'academic'],
            'blog': ['blog', 'article']
        };
        
        const tags = [...(baseTags[category] || [])];
        
        const name = fileName.toLowerCase();
        if (name.includes('phys')) tags.push('physics');
        if (name.includes('tech')) tags.push('technology');
        if (name.includes('research')) tags.push('research');
        
        return tags;
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    listDocuments(category = null) {
        let docs = this.documents;
        
        if (category) {
            docs = docs.filter(doc => doc.category === category);
        }
        
        if (docs.length === 0) {
            console.log('üìÑ ÊöÇÊó†ÊñáÊ°£');
            return;
        }
        
        console.log(`\nüìÑ ÊñáÊ°£ÂàóË°® (${docs.length} ‰∏™ÊñáÊ°£):\n`);
        
        docs.forEach((doc, index) => {
            console.log(`${index + 1}. ${doc.title}`);
            console.log(`   ID: ${doc.id}`);
            console.log(`   ÂàÜÁ±ª: ${this.categories[doc.category]?.title || doc.category}`);
            console.log(`   Êñá‰ª∂: ${doc.filename}`);
            console.log(`   Â§ßÂ∞è: ${doc.fileSize}`);
            console.log(`   Êó•Êúü: ${doc.date}`);
            console.log(`   Ê†áÁ≠æ: ${doc.tags.join(', ')}`);
            console.log('');
        });
    }
    
    removeDocument(id) {
        const index = this.documents.findIndex(doc => doc.id === id);
        
        if (index === -1) {
            console.error(`‚ùå Êú™ÊâæÂà∞ÊñáÊ°£: ${id}`);
            return false;
        }
        
        const doc = this.documents[index];
        const filePath = path.join('./', doc.path);
        
        // Âà†Èô§Êñá‰ª∂
        if (fs.existsSync(filePath)) {
            try {
                fs.unlinkSync(filePath);
                console.log(`‚úÖ Â∑≤Âà†Èô§Êñá‰ª∂: ${filePath}`);
            } catch (error) {
                console.error(`‚ùå Âà†Èô§Êñá‰ª∂Â§±Ë¥•:`, error);
            }
        }
        
        // ‰ªéËÆ∞ÂΩï‰∏≠ÁßªÈô§
        this.documents.splice(index, 1);
        this.saveDocuments();
        
        console.log(`‚úÖ Â∑≤ÁßªÈô§ÊñáÊ°£: ${doc.title}`);
        return true;
    }
    
    showHelp() {
        console.log(`
üìÑ ÊñáÊ°£ÁÆ°ÁêÜÂ∑•ÂÖ∑ - ‰ΩøÁî®ËØ¥Êòé

ÂëΩ‰ª§Ê†ºÂºè:
  node tools/document-manager.js <command> [options]

ÂèØÁî®ÂëΩ‰ª§:
  add <file>           Ê∑ªÂä†ÊñáÊ°£
  list [category]      ÂàóÂá∫ÊñáÊ°£
  remove <id>          Âà†Èô§ÊñáÊ°£
  help                 ÊòæÁ§∫Â∏ÆÂä©

Ê∑ªÂä†ÊñáÊ°£ÈÄâÈ°π:
  --title <title>      ÊñáÊ°£Ê†áÈ¢ò
  --title-en <title>   Ëã±ÊñáÊ†áÈ¢ò
  --description <desc> ÊñáÊ°£ÊèèËø∞
  --category <cat>     ÊñáÊ°£ÂàÜÁ±ª (${Object.keys(this.categories).join(', ')})
  --tags <tags>        Ê†áÁ≠æ (ÈÄóÂè∑ÂàÜÈöî)
  --author <author>    ‰ΩúËÄÖ
  --date <date>        Êó•Êúü (YYYY-MM-DD)
  --overwrite          Ë¶ÜÁõñÂ∑≤Â≠òÂú®ÁöÑÊñáÊ°£

Á§∫‰æã:
  # Ê∑ªÂä†ÁÆÄÂéÜ
  node tools/document-manager.js add ./main.pdf --category resume --title "‰∏™‰∫∫ÁÆÄÂéÜ"
  
  # Ê∑ªÂä†Áâ©ÁêÜËÆ∫Êñá
  node tools/document-manager.js add ./paper.pdf --category academic --tags "Áâ©ÁêÜ,DSMC,ËÆ∫Êñá"
  
  # Ê∑ªÂä†ÊºîËÆ≤Á®ø
  node tools/document-manager.js add ./slides.pptx --category presentations --title "PHYSÁ†îÁ©∂Êä•Âëä"
  
  # ÂàóÂá∫ÊâÄÊúâÊñáÊ°£
  node tools/document-manager.js list
  
  # ÂàóÂá∫ÁâπÂÆöÂàÜÁ±ª
  node tools/document-manager.js list academic
  
  # Âà†Èô§ÊñáÊ°£
  node tools/document-manager.js remove document-id

ÊñáÊ°£ÂàÜÁ±ª:
${Object.entries(this.categories).map(([key, cat]) => `  ${key.padEnd(12)} - ${cat.title}`).join('\n')}
        `);
    }
}

// ‰∏ªÁ®ãÂ∫è
function main() {
    const args = process.argv.slice(2);
    const manager = new DocumentManager();
    
    if (args.length === 0 || args[0] === 'help') {
        manager.showHelp();
        return;
    }
    
    const command = args[0];
    
    switch (command) {
        case 'add': {
            if (args.length < 2) {
                console.error('‚ùå ËØ∑ÊåáÂÆöË¶ÅÊ∑ªÂä†ÁöÑÊñá‰ª∂');
                return;
            }
            
            const filePath = args[1];
            const options = {};
            
            // Ëß£ÊûêÈÄâÈ°π
            for (let i = 2; i < args.length; i += 2) {
                const option = args[i];
                const value = args[i + 1];
                
                switch (option) {
                    case '--title':
                        options.title = value;
                        break;
                    case '--title-en':
                        options.titleEn = value;
                        break;
                    case '--description':
                        options.description = value;
                        break;
                    case '--category':
                        options.category = value;
                        break;
                    case '--tags':
                        options.tags = value.split(',').map(tag => tag.trim());
                        break;
                    case '--author':
                        options.author = value;
                        break;
                    case '--date':
                        options.date = value;
                        break;
                    case '--overwrite':
                        options.overwrite = true;
                        i--; // Ëøô‰∏™ÈÄâÈ°πÊ≤°ÊúâÂÄº
                        break;
                }
            }
            
            manager.addDocument(filePath, options);
            break;
        }
        
        case 'list': {
            const category = args[1] || null;
            manager.listDocuments(category);
            break;
        }
        
        case 'remove': {
            if (args.length < 2) {
                console.error('‚ùå ËØ∑ÊåáÂÆöË¶ÅÂà†Èô§ÁöÑÊñáÊ°£ID');
                return;
            }
            
            const id = args[1];
            manager.removeDocument(id);
            break;
        }
        
        default:
            console.error(`‚ùå Êú™Áü•ÂëΩ‰ª§: ${command}`);
            manager.showHelp();
    }
}

if (require.main === module) {
    main();
}

module.exports = DocumentManager;